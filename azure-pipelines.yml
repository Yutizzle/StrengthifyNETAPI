# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '7b67eb76-e2d2-4671-b5e2-09353d1c7c71'
  kubernetesServiceConnection: 'StrengthifyCluster-default'
  imageRepository: 'strengthify'
  containerRegistry: 'strengthifycontainerregistry.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'strengthifycontainerregistry1025de8a-auth'

pool:
  vmImage: windows11
  name: Default

stages:
- stage: Build
  displayName: Build & Deploy stage
  jobs:
  - job: Build
    displayName: Build & Deploy
    pool:
      vmImage: $(vmImageName)
    steps:
    # Build .NET Core API application
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: '$(System.DefaultWorkingDirectory)\src\*.csproj'
  - job: Test
    displayName: Test
    pool:
      vmImage: $(vmImageName)
    steps:
    # Test .NET Core API application
    - task: VSTest@2
      inputs:
        testSelector: 'testAssemblies'
        testAssemblyVer2: |
          StrengthifyNETAPI.Tests.dll
        searchFolder: '$(System.DefaultWorkingDirectory)\tests\bin\Debug\net6.0'
  - job: BuildImage
    displayName: Build Image
    pool:
      vmImage: $(vmImageName)
    steps:
    # Build Docker Image and Upload to Registry
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests
    
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'Strengthify-2116.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)