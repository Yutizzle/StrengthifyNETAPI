# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  - group: strengthify-secrets
  - name: dockerRegistryServiceConnection
    value: 'cc959d27-4465-443a-b095-c56a8fa3c7fc'
  - name: imageRepository
    value: 'strengthifynetapi'
  - name: containerRegistry
    value: 'strengthifycontainerregistry.azurecr.io'
  - name: tag
    value: '$(Build.BuildId)'
  - name: imagePullSecret
    value: 'strengthifycontainerregistry9386155a-auth'
  - name: kubernetesServiceConnection
    value: 'StrengthifyCluster-default'
  - name: dockerfilePath
    value: '$(Build.SourcesDirectory)/Dockerfile'
  - name: 'stringData.POSTGRES_USER'
    value: '$(POSTGRES-USER)'
  - name: 'stringData.POSTGRES_PASSWORD'
    value: '$(POSTGRES-PASSWORD)'
  - name: 'stringData.SUPABASE_URL'
    value: '$(SUPABASE-URL)'
  - name: 'stringData.SUPABASE_KEY'
    value: '$(SUPABASE-KEY)'
  - name: 'stringData.SUPABASE_SERVICE_KEY'
    value: '$(SUPABASE-SERVICE-KEY)'
  - name: 'stringData.JWT_SECRET'
    value: '$(JWT-SECRET)'

pool:
  vmImage: windows11
  name: Default

steps:
  # Build .NET Core API application
  - task: DotNetCoreCLI@2
    inputs:
      command: 'build'
      projects: '$(System.DefaultWorkingDirectory)\src\*.csproj'

  # Test .NET Core API application
  - task: VSTest@2
    inputs:
      testSelector: 'testAssemblies'
      testAssemblyVer2: |
        StrengthifyNETAPI.Tests.dll
      searchFolder: '$(System.DefaultWorkingDirectory)\tests\bin\Debug\net6.0'

  # Run Build and Push Containers and Upload to Registry
  - task: DockerCompose@0
    displayName: 'Build Docker Images'
    inputs:
      containerregistrytype: 'Azure Container Registry'
      azureSubscription: 'Azure subscription 1(66a6a688-1c7f-4f4f-a3dd-cecf7b8f02e4)'
      azureContainerRegistry: '{"loginServer":"strengthifycontainerregistry.azurecr.io", "id" : "/subscriptions/66a6a688-1c7f-4f4f-a3dd-cecf7b8f02e4/resourceGroups/strengthify-rg/providers/Microsoft.ContainerRegistry/registries/strengthifycontainerregistry"}'
      dockerComposeFile: '**/docker-compose.yml'
      dockerComposeFileArgs: 'DOCKER_BUILD_SOURCE='
      additionalImageTags: $(Build.BuildId)
      action: 'Build services'
  - task: DockerCompose@0
    displayName: 'Push Docker Images'
    inputs:
      containerregistrytype: 'Azure Container Registry'
      azureSubscription: 'Azure subscription 1(66a6a688-1c7f-4f4f-a3dd-cecf7b8f02e4)'
      azureContainerRegistry: '{"loginServer":"strengthifycontainerregistry.azurecr.io", "id" : "/subscriptions/66a6a688-1c7f-4f4f-a3dd-cecf7b8f02e4/resourceGroups/strengthify-rg/providers/Microsoft.ContainerRegistry/registries/strengthifycontainerregistry"}'
      dockerComposeFile: '**/docker-compose.yml'
      dockerComposeFileArgs: 'DOCKER_BUILD_SOURCE='
      additionalImageTags: $(Build.BuildId)
      action: 'Push services'
  - task: DockerCompose@0
    displayName: 'Lock Docker Images'
    inputs:
      containerregistrytype: 'Azure Container Registry'
      azureSubscription: 'Azure subscription 1(66a6a688-1c7f-4f4f-a3dd-cecf7b8f02e4)'
      azureContainerRegistry: '{"loginServer":"strengthifycontainerregistry.azurecr.io", "id" : "/subscriptions/66a6a688-1c7f-4f4f-a3dd-cecf7b8f02e4/resourceGroups/strengthify-rg/providers/Microsoft.ContainerRegistry/registries/strengthifycontainerregistry"}'
      dockerComposeFile: '**/docker-compose.yml'
      action: 'Lock services'
      outputDockerComposeFile: '$(Build.StagingDirectory)/docker-compose.yml'
      
  - upload: manifests
    artifact: manifests
  
  # Create Image Pull Secret
  - task: KubernetesManifest@0
    displayName: Create imagePullSecret
    inputs:
      action: createSecret
      secretName: $(imagePullSecret)
      dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
      kubernetesServiceConnection: $(kubernetesServiceConnection)
  # Update environment secrets
  - task: FileTransform@1
    inputs:
      folderPath: '$(System.DefaultWorkingDirectory)/manifests'
      fileType: 'json'
      targetFiles: 'secrets.json'

  # Deploy NET Core App to Kubernetes Cluster
  - task: KubernetesManifest@0
    displayName: Deploy App to Kubernetes cluster
    inputs:
      action: deploy
      manifests: |
        $(Build.SourcesDirectory)/manifests/deployment.yml
        $(Build.SourcesDirectory)/manifests/service.yml
        $(Build.SourcesDirectory)/manifests/secrets.json
      imagePullSecrets: |
        $(imagePullSecret)
      containers: |
        $(containerRegistry)/$(imageRepository):$(Build.BuildId)
      kubernetesServiceConnection: $(kubernetesServiceConnection)

  # Deploy postgresdb to Kubernetes Cluster
  - task: KubernetesManifest@0
    displayName: Deploy PostgresDB to Kubernetes cluster
    inputs:
      action: deploy
      manifests: |
        $(Build.SourcesDirectory)/manifests/postgres-deployment.yml
        $(Build.SourcesDirectory)/manifests/postgres-service.yml
        $(Build.SourcesDirectory)/manifests/secrets.json
      kubernetesServiceConnection: $(kubernetesServiceConnection)